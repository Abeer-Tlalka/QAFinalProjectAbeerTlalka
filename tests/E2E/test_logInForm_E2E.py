# # Generated by Selenium IDE
# import pytest
# import time
# import json
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.support import expected_conditions
# from selenium.webdriver.support.wait import WebDriverWait
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC

# class TestLogInForm():
#   def setup_method(self, method):
#     self.driver = webdriver.Chrome()
#     self.driver.get("http://localhost:8000/")
#     # self.driver.set_window_size(1296, 687)
#     self.driver.maximize_window()
#     self.vars = {}
  
#   def teardown_method(self, method):
#     self.driver.quit()
  
#   def test_logInCorrectly(self):
#     '''
    
#     '''
#     self.driver.find_element(By.CSS_SELECTOR, ".nav-link:nth-child(2)").click()
#     self.driver.find_element(By.ID, "email").click()
#     self.driver.find_element(By.ID, "email").send_keys("marklee@gmail.com")
#     self.driver.find_element(By.ID, "password").click()
#     self.driver.find_element(By.ID, "password").send_keys("1234")
#     self.driver.find_element(By.CSS_SELECTOR, ".mt-3").click()

#     # Wait for the element to appear before asserting
#     WebDriverWait(self.driver, 10).until(
#         EC.visibility_of_element_located((By.ID, "username"))
#     )

#     assert self.driver.find_element(By.ID, "username").text == "MARK LEE"
  
  
#   def test_logInEmptyPassword(self):
#       self.driver.find_element(By.CSS_SELECTOR, ".nav-link:nth-child(2)").click()
#       self.driver.find_element(By.ID, "email").send_keys("marklee@gmail.com")
#       self.driver.find_element(By.ID, "password").send_keys("")
#       self.driver.find_element(By.CSS_SELECTOR, ".mt-3").click()

#       # Wait for the error message to appear before asserting
#       WebDriverWait(self.driver, 10).until(
#           EC.visibility_of_element_located((By.CSS_SELECTOR, ".fade"))
#       )

#       assert self.driver.find_element(By.CSS_SELECTOR, ".fade").text == "Request failed with status code 400"
    
  
#   def test_logInWithEmptyFill(self):
#       self.driver.find_element(By.CSS_SELECTOR, ".nav-link:nth-child(2)").click()
#       self.driver.find_element(By.ID, "email").send_keys("")
#       self.driver.find_element(By.ID, "password").send_keys("")
#       self.driver.find_element(By.CSS_SELECTOR, ".mt-3").click()

#       # Wait for the error message to appear before asserting
#       WebDriverWait(self.driver, 10).until(
#           EC.visibility_of_element_located((By.CSS_SELECTOR, ".fade"))
#       )

#       assert self.driver.find_element(By.CSS_SELECTOR, ".fade").text == "Request failed with status code 400"
  
#   def test_logInWithWrongPassword(self):
    
#     self.driver.find_element(By.CSS_SELECTOR, ".nav-link:nth-child(2)").click()
#     self.driver.find_element(By.CSS_SELECTOR, ".form-group:nth-child(1) > .form-label").click()
#     self.driver.find_element(By.ID, "email").click()
#     self.driver.find_element(By.ID, "email").send_keys("marklee@gmail.com")
#     self.driver.find_element(By.ID, "password").click()
#     self.driver.find_element(By.ID, "password").send_keys("111")
#     self.driver.find_element(By.CSS_SELECTOR, ".mt-3").click()
#     WebDriverWait(self.driver, 10).until(
#           EC.visibility_of_element_located((By.CSS_SELECTOR, ".fade"))
#       )
#     assert self.driver.find_element(By.CSS_SELECTOR, ".fade").text == "No active account found with the given credentials"
  
#   def test_lonInWithUserDoesNotToken(self):
    
#     self.driver.find_element(By.CSS_SELECTOR, ".nav-link:nth-child(2)").click()
#     self.driver.find_element(By.ID, "email").send_keys("naden@gmail.com")
#     self.driver.find_element(By.ID, "password").send_keys("1111")
#     self.driver.find_element(By.CSS_SELECTOR, ".mt-3").click()
#     WebDriverWait(self.driver, 10).until(
#           EC.visibility_of_element_located((By.CSS_SELECTOR, ".fade"))
#       )
#     assert self.driver.find_element(By.CSS_SELECTOR, ".fade").text == "No active account found with the given credentials"
  
